{"ast":null,"code":"const key = \"basket\";\n//Функция для создания массива в Local Storage:\nexport function createArrayInLocalStorage() {\n  if (!localStorage.getItem(key)) {\n    const initialArray = [];\n    const arrayString = JSON.stringify(initialArray);\n    localStorage.setItem(key, arrayString);\n  }\n}\n//Функция для добавления объектов в массив в Local Storage:\n// export function addObjectToArrayInLocalStorage(newObject) {\n//   // Получаем текущий массив из Local Storage\n//   const arrayString = localStorage.getItem(key);\n//   if (arrayString) {\n//     try {\n//       const currentArray = JSON.parse(arrayString);\n//       //   newObject.count = 1;\n//       currentArray.push({ ...newObject, count: 1 });\n//       const updatedArrayString = JSON.stringify(currentArray);\n//       localStorage.setItem(key, updatedArrayString);\n//     } catch (error) {\n//       console.error(\"Error parsing or updating array:\", error);\n//     }\n//   } else {\n//     console.error(\"Array not found in Local Storage.\");\n//   }\n// }\n\nexport function addObjectToArrayInLocalStorage(key, newObject) {\n  // Получаем текущий массив из Local Storage\n  const arrayString = localStorage.getItem(key);\n  if (arrayString) {\n    try {\n      const currentArray = JSON.parse(arrayString);\n\n      // Проверяем наличие объекта с таким же _id\n      const existingObject = currentArray.find(obj => obj._id === newObject._id);\n      if (existingObject) {\n        // Если объект с таким _id уже существует, обновляем его\n        existingObject.count = (existingObject.count || 0) + 1;\n      } else {\n        // Если объекта с таким _id нет, добавляем новый объект\n        currentArray.push({\n          ...newObject,\n          count: 1\n        });\n      }\n      const updatedArrayString = JSON.stringify(currentArray);\n      localStorage.setItem(key, updatedArrayString);\n    } catch (error) {\n      console.error(\"Error parsing or updating array:\", error);\n    }\n  } else {\n    console.error(\"Array not found in Local Storage.\");\n  }\n}\n\n//Функция для извлечения данных из Local Storage:\nexport function getDataFromLocalStorage() {\n  const dataString = localStorage.getItem(key);\n  if (dataString) {\n    try {\n      const data = JSON.parse(dataString);\n      return data;\n    } catch (error) {\n      console.error(\"Error parsing data from Local Storage:\", error);\n      return null;\n    }\n  } else {\n    console.error(\"Data not found in Local Storage.\");\n    return null;\n  }\n}\nexport function removeDataFromLocalStorage() {\n  localStorage.removeItem(key);\n}","map":{"version":3,"names":["key","createArrayInLocalStorage","localStorage","getItem","initialArray","arrayString","JSON","stringify","setItem","addObjectToArrayInLocalStorage","newObject","currentArray","parse","existingObject","find","obj","_id","count","push","updatedArrayString","error","console","getDataFromLocalStorage","dataString","data","removeDataFromLocalStorage","removeItem"],"sources":["/Users/maksimrogozin/Documents/VScode/workout_diplom/WORKOUT/client/src/app/utils/basket.localStorage.js"],"sourcesContent":["const key = \"basket\";\n//Функция для создания массива в Local Storage:\nexport function createArrayInLocalStorage() {\n  if (!localStorage.getItem(key)) {\n    const initialArray = [];\n    const arrayString = JSON.stringify(initialArray);\n    localStorage.setItem(key, arrayString);\n  }\n}\n//Функция для добавления объектов в массив в Local Storage:\n// export function addObjectToArrayInLocalStorage(newObject) {\n//   // Получаем текущий массив из Local Storage\n//   const arrayString = localStorage.getItem(key);\n//   if (arrayString) {\n//     try {\n//       const currentArray = JSON.parse(arrayString);\n//       //   newObject.count = 1;\n//       currentArray.push({ ...newObject, count: 1 });\n//       const updatedArrayString = JSON.stringify(currentArray);\n//       localStorage.setItem(key, updatedArrayString);\n//     } catch (error) {\n//       console.error(\"Error parsing or updating array:\", error);\n//     }\n//   } else {\n//     console.error(\"Array not found in Local Storage.\");\n//   }\n// }\n\nexport function addObjectToArrayInLocalStorage(key, newObject) {\n  // Получаем текущий массив из Local Storage\n  const arrayString = localStorage.getItem(key);\n\n  if (arrayString) {\n    try {\n      const currentArray = JSON.parse(arrayString);\n\n      // Проверяем наличие объекта с таким же _id\n      const existingObject = currentArray.find(\n        (obj) => obj._id === newObject._id\n      );\n\n      if (existingObject) {\n        // Если объект с таким _id уже существует, обновляем его\n        existingObject.count = (existingObject.count || 0) + 1;\n      } else {\n        // Если объекта с таким _id нет, добавляем новый объект\n        currentArray.push({ ...newObject, count: 1 });\n      }\n\n      const updatedArrayString = JSON.stringify(currentArray);\n      localStorage.setItem(key, updatedArrayString);\n    } catch (error) {\n      console.error(\"Error parsing or updating array:\", error);\n    }\n  } else {\n    console.error(\"Array not found in Local Storage.\");\n  }\n}\n\n//Функция для извлечения данных из Local Storage:\nexport function getDataFromLocalStorage() {\n  const dataString = localStorage.getItem(key);\n\n  if (dataString) {\n    try {\n      const data = JSON.parse(dataString);\n      return data;\n    } catch (error) {\n      console.error(\"Error parsing data from Local Storage:\", error);\n      return null;\n    }\n  } else {\n    console.error(\"Data not found in Local Storage.\");\n    return null;\n  }\n}\n\nexport function removeDataFromLocalStorage() {\n  localStorage.removeItem(key);\n}\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,QAAQ;AACpB;AACA,OAAO,SAASC,yBAAyBA,CAAA,EAAG;EAC1C,IAAI,CAACC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;IAC9B,MAAMI,YAAY,GAAG,EAAE;IACvB,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC;IAChDF,YAAY,CAACM,OAAO,CAACR,GAAG,EAAEK,WAAW,CAAC;EACxC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,8BAA8BA,CAACT,GAAG,EAAEU,SAAS,EAAE;EAC7D;EACA,MAAML,WAAW,GAAGH,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC;EAE7C,IAAIK,WAAW,EAAE;IACf,IAAI;MACF,MAAMM,YAAY,GAAGL,IAAI,CAACM,KAAK,CAACP,WAAW,CAAC;;MAE5C;MACA,MAAMQ,cAAc,GAAGF,YAAY,CAACG,IAAI,CACrCC,GAAG,IAAKA,GAAG,CAACC,GAAG,KAAKN,SAAS,CAACM,GACjC,CAAC;MAED,IAAIH,cAAc,EAAE;QAClB;QACAA,cAAc,CAACI,KAAK,GAAG,CAACJ,cAAc,CAACI,KAAK,IAAI,CAAC,IAAI,CAAC;MACxD,CAAC,MAAM;QACL;QACAN,YAAY,CAACO,IAAI,CAAC;UAAE,GAAGR,SAAS;UAAEO,KAAK,EAAE;QAAE,CAAC,CAAC;MAC/C;MAEA,MAAME,kBAAkB,GAAGb,IAAI,CAACC,SAAS,CAACI,YAAY,CAAC;MACvDT,YAAY,CAACM,OAAO,CAACR,GAAG,EAAEmB,kBAAkB,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC,MAAM;IACLC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAC;EACpD;AACF;;AAEA;AACA,OAAO,SAASE,uBAAuBA,CAAA,EAAG;EACxC,MAAMC,UAAU,GAAGrB,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC;EAE5C,IAAIuB,UAAU,EAAE;IACd,IAAI;MACF,MAAMC,IAAI,GAAGlB,IAAI,CAACM,KAAK,CAACW,UAAU,CAAC;MACnC,OAAOC,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,OAAO,IAAI;IACb;EACF,CAAC,MAAM;IACLC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;IACjD,OAAO,IAAI;EACb;AACF;AAEA,OAAO,SAASK,0BAA0BA,CAAA,EAAG;EAC3CvB,YAAY,CAACwB,UAAU,CAAC1B,GAAG,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}