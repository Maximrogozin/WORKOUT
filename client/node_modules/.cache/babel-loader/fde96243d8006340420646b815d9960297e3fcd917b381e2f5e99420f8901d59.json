{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// import localStorageService from \"../services/localStorage.service\";\nimport catalogService from \"../services/catalog.service\";\n\n// const initialState = localStorageService.getAccessToken()\n//   ? {\n//       entities: null,\n//       isLoading: true,\n//       error: null,\n//       auth: { userId: localStorageService.getUserId() },\n//       isLoggedIn: true,\n//       dataLoaded: false,\n//     }\n//   : {\n//       entities: null,\n//       isLoading: false,\n//       error: null,\n//       auth: null,\n//       isLoggedIn: false,\n//       dataLoaded: false,\n//     };\n\nconst catalogsSlice = createSlice({\n  name: \"catalogs\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null\n  },\n  reducers: {\n    catalogsRequested: state => {\n      state.isLoading = true;\n    },\n    catalogsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    catalogsRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: catalogsReducer,\n  actions\n} = catalogsSlice;\nconst {\n  catalogsRequested,\n  catalogsReceived,\n  catalogsRequestFailed\n} = actions;\nexport const loadCatalogsList = () => async (dispatch, getState) => {\n  dispatch(catalogsRequested());\n  try {\n    const {\n      content\n    } = await catalogService.get();\n    dispatch(catalogsReceived(content));\n  } catch (error) {\n    dispatch(catalogsRequestFailed(error.message));\n  }\n};\nexport const getCatalogsList = () => state => state.catalogs.entities;\nexport const getCatalogsLoadingStatus = () => state => state.catalogs.isLoading;\nexport default catalogsReducer;","map":{"version":3,"names":["createSlice","catalogService","catalogsSlice","name","initialState","entities","isLoading","error","reducers","catalogsRequested","state","catalogsReceived","action","payload","dataLoaded","catalogsRequestFailed","reducer","catalogsReducer","actions","loadCatalogsList","dispatch","getState","content","get","message","getCatalogsList","catalogs","getCatalogsLoadingStatus"],"sources":["/Users/maksimrogozin/Documents/VScode/workout_diplom/WORKOUT/client/src/app/store/catalog.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n// import localStorageService from \"../services/localStorage.service\";\nimport catalogService from \"../services/catalog.service\";\n\n// const initialState = localStorageService.getAccessToken()\n//   ? {\n//       entities: null,\n//       isLoading: true,\n//       error: null,\n//       auth: { userId: localStorageService.getUserId() },\n//       isLoggedIn: true,\n//       dataLoaded: false,\n//     }\n//   : {\n//       entities: null,\n//       isLoading: false,\n//       error: null,\n//       auth: null,\n//       isLoggedIn: false,\n//       dataLoaded: false,\n//     };\n\nconst catalogsSlice = createSlice({\n  name: \"catalogs\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n  },\n  reducers: {\n    catalogsRequested: (state) => {\n      state.isLoading = true;\n    },\n    catalogsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    catalogsRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { reducer: catalogsReducer, actions } = catalogsSlice;\nconst { catalogsRequested, catalogsReceived, catalogsRequestFailed } = actions;\n\nexport const loadCatalogsList = () => async (dispatch, getState) => {\n  dispatch(catalogsRequested());\n  try {\n    const { content } = await catalogService.get();\n    dispatch(catalogsReceived(content));\n  } catch (error) {\n    dispatch(catalogsRequestFailed(error.message));\n  }\n};\n\nexport const getCatalogsList = () => (state) => state.catalogs.entities;\nexport const getCatalogsLoadingStatus = () => (state) =>\n  state.catalogs.isLoading;\n\nexport default catalogsReducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,OAAOC,cAAc,MAAM,6BAA6B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAGF,WAAW,CAAC;EAChCG,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE,IAAI;IACfC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,EAAGC,KAAK,IAAK;MAC5BA,KAAK,CAACJ,SAAS,GAAG,IAAI;IACxB,CAAC;IACDK,gBAAgB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnCF,KAAK,CAACL,QAAQ,GAAGO,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACI,UAAU,GAAG,IAAI;MACvBJ,KAAK,CAACJ,SAAS,GAAG,KAAK;IACzB,CAAC;IACDS,qBAAqB,EAAEA,CAACL,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACH,KAAK,GAAGK,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACJ,SAAS,GAAG,KAAK;IACzB;EACF;AACF,CAAC,CAAC;AAEF,MAAM;EAAEU,OAAO,EAAEC,eAAe;EAAEC;AAAQ,CAAC,GAAGhB,aAAa;AAC3D,MAAM;EAAEO,iBAAiB;EAAEE,gBAAgB;EAAEI;AAAsB,CAAC,GAAGG,OAAO;AAE9E,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAClED,QAAQ,CAACX,iBAAiB,CAAC,CAAC,CAAC;EAC7B,IAAI;IACF,MAAM;MAAEa;IAAQ,CAAC,GAAG,MAAMrB,cAAc,CAACsB,GAAG,CAAC,CAAC;IAC9CH,QAAQ,CAACT,gBAAgB,CAACW,OAAO,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOf,KAAK,EAAE;IACda,QAAQ,CAACL,qBAAqB,CAACR,KAAK,CAACiB,OAAO,CAAC,CAAC;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAOf,KAAK,IAAKA,KAAK,CAACgB,QAAQ,CAACrB,QAAQ;AACvE,OAAO,MAAMsB,wBAAwB,GAAGA,CAAA,KAAOjB,KAAK,IAClDA,KAAK,CAACgB,QAAQ,CAACpB,SAAS;AAE1B,eAAeW,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}