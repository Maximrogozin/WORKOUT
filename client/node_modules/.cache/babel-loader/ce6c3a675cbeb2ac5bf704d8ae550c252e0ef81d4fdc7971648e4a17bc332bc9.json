{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport localStorageService from \"../services/localStorage.service\";\nimport catalogService from \"../services/catalog.service\";\nconst initialState = localStorageService.getAccessToken() ? {\n  entities: null,\n  isLoading: true,\n  error: null,\n  auth: {\n    userId: localStorageService.getUserId()\n  },\n  isLoggedIn: true,\n  dataLoaded: false\n} : {\n  entities: null,\n  isLoading: false,\n  error: null,\n  auth: null,\n  isLoggedIn: false,\n  dataLoaded: false\n};\nconst catalogsSlice = createSlice({\n  name: \"catalogs\",\n  initialState,\n  reducers: {\n    catalogsRequested: state => {\n      state.isLoading = true;\n    },\n    catalogsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    catalogsRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: catalogsReducer,\n  actions\n} = catalogsSlice;\nconst {\n  catalogsRequested,\n  catalogsReceived,\n  catalogsRequestFailed\n} = actions;\nexport const loadCatalogsList = () => async (dispatch, getState) => {\n  dispatch(catalogsRequested());\n  try {\n    const {\n      content\n    } = await catalogService.get();\n    dispatch(catalogsReceived(content));\n  } catch (error) {\n    dispatch(catalogsRequestFailed(error.message));\n  }\n};\nexport const getCatalogList = () => state => state.catalogs.entities;\nexport const getCatalogsLoadingStatus = () => state => state.catalogs.isLoading;\nexport default catalogsReducer;","map":{"version":3,"names":["createSlice","localStorageService","catalogService","initialState","getAccessToken","entities","isLoading","error","auth","userId","getUserId","isLoggedIn","dataLoaded","catalogsSlice","name","reducers","catalogsRequested","state","catalogsReceived","action","payload","catalogsRequestFailed","reducer","catalogsReducer","actions","loadCatalogsList","dispatch","getState","content","get","message","getCatalogList","catalogs","getCatalogsLoadingStatus"],"sources":["/Users/maksimrogozin/Documents/VScode/workout_diplom/WORKOUT/client/src/app/store/catalog.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport localStorageService from \"../services/localStorage.service\";\nimport catalogService from \"../services/catalog.service\";\n\nconst initialState = localStorageService.getAccessToken()\n  ? {\n      entities: null,\n      isLoading: true,\n      error: null,\n      auth: { userId: localStorageService.getUserId() },\n      isLoggedIn: true,\n      dataLoaded: false,\n    }\n  : {\n      entities: null,\n      isLoading: false,\n      error: null,\n      auth: null,\n      isLoggedIn: false,\n      dataLoaded: false,\n    };\n\nconst catalogsSlice = createSlice({\n  name: \"catalogs\",\n  initialState,\n  reducers: {\n    catalogsRequested: (state) => {\n      state.isLoading = true;\n    },\n    catalogsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    catalogsRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { reducer: catalogsReducer, actions } = catalogsSlice;\nconst { catalogsRequested, catalogsReceived, catalogsRequestFailed } = actions;\n\nexport const loadCatalogsList = () => async (dispatch, getState) => {\n  dispatch(catalogsRequested());\n  try {\n    const { content } = await catalogService.get();\n    dispatch(catalogsReceived(content));\n  } catch (error) {\n    dispatch(catalogsRequestFailed(error.message));\n  }\n};\n\nexport const getCatalogList = () => (state) => state.catalogs.entities;\nexport const getCatalogsLoadingStatus = () => (state) =>\n  state.catalogs.isLoading;\n\nexport default catalogsReducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,mBAAmB,MAAM,kCAAkC;AAClE,OAAOC,cAAc,MAAM,6BAA6B;AAExD,MAAMC,YAAY,GAAGF,mBAAmB,CAACG,cAAc,CAAC,CAAC,GACrD;EACEC,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE;IAAEC,MAAM,EAAER,mBAAmB,CAACS,SAAS,CAAC;EAAE,CAAC;EACjDC,UAAU,EAAE,IAAI;EAChBC,UAAU,EAAE;AACd,CAAC,GACD;EACEP,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVG,UAAU,EAAE,KAAK;EACjBC,UAAU,EAAE;AACd,CAAC;AAEL,MAAMC,aAAa,GAAGb,WAAW,CAAC;EAChCc,IAAI,EAAE,UAAU;EAChBX,YAAY;EACZY,QAAQ,EAAE;IACRC,iBAAiB,EAAGC,KAAK,IAAK;MAC5BA,KAAK,CAACX,SAAS,GAAG,IAAI;IACxB,CAAC;IACDY,gBAAgB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnCF,KAAK,CAACZ,QAAQ,GAAGc,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACL,UAAU,GAAG,IAAI;MACvBK,KAAK,CAACX,SAAS,GAAG,KAAK;IACzB,CAAC;IACDe,qBAAqB,EAAEA,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACxCF,KAAK,CAACV,KAAK,GAAGY,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACX,SAAS,GAAG,KAAK;IACzB;EACF;AACF,CAAC,CAAC;AAEF,MAAM;EAAEgB,OAAO,EAAEC,eAAe;EAAEC;AAAQ,CAAC,GAAGX,aAAa;AAC3D,MAAM;EAAEG,iBAAiB;EAAEE,gBAAgB;EAAEG;AAAsB,CAAC,GAAGG,OAAO;AAE9E,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAClED,QAAQ,CAACV,iBAAiB,CAAC,CAAC,CAAC;EAC7B,IAAI;IACF,MAAM;MAAEY;IAAQ,CAAC,GAAG,MAAM1B,cAAc,CAAC2B,GAAG,CAAC,CAAC;IAC9CH,QAAQ,CAACR,gBAAgB,CAACU,OAAO,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdmB,QAAQ,CAACL,qBAAqB,CAACd,KAAK,CAACuB,OAAO,CAAC,CAAC;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAOd,KAAK,IAAKA,KAAK,CAACe,QAAQ,CAAC3B,QAAQ;AACtE,OAAO,MAAM4B,wBAAwB,GAAGA,CAAA,KAAOhB,KAAK,IAClDA,KAAK,CAACe,QAAQ,CAAC1B,SAAS;AAE1B,eAAeiB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}