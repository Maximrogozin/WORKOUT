{"ast":null,"code":"var _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport category from \"../mockData/category.json\";\nimport catalog from \"../mockData/catalog.json\";\nimport httpService from \"../services/http.service\";\nconst useMockData = () => {\n  _s();\n  const statusConst = {\n    idle: \"Not Satarted\",\n    pending: \"In Progress\",\n    success: \"Completed\",\n    error: \"Error\"\n  };\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(statusConst.idle);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(0);\n  const summaryCount = category.length + catalog.length;\n  const incrementCount = () => {\n    setCount(prevState => prevState + 1);\n  };\n  const updateProgress = () => {\n    if (count !== 0 && status === statusConst.idle) {\n      setStatus(statusConst.pending);\n    }\n    const newProgress = Math.floor(count / summaryCount * 100);\n    if (progress < newProgress) {\n      setProgress(() => newProgress);\n    }\n    if (newProgress === 100) {\n      setStatus(statusConst.success);\n    }\n  };\n  useEffect(() => {\n    updateProgress();\n  }, [count]);\n  async function initialize() {\n    try {\n      for (const categ of category) {\n        await httpService.put(\"category/\" + categ.id, category);\n        incrementCount();\n      }\n      for (const cat of catalog) {\n        await httpService.put(\"catalog/\" + cat.id, cat);\n        incrementCount();\n      }\n    } catch (error) {\n      setError(error);\n      setStatus(statusConst.error);\n    }\n  }\n  return {\n    error,\n    initialize,\n    progress,\n    status\n  };\n};\n_s(useMockData, \"nFc5A7JUacwurFHjjW9pviQ1ddU=\");\nexport default useMockData;","map":{"version":3,"names":["useEffect","useState","category","catalog","httpService","useMockData","_s","statusConst","idle","pending","success","error","setError","status","setStatus","progress","setProgress","count","setCount","summaryCount","length","incrementCount","prevState","updateProgress","newProgress","Math","floor","initialize","categ","put","id","cat"],"sources":["/Users/maksimrogozin/Documents/VScode/workout_diplom/WORKOUT/client/src/app/utils/mockData.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\n\nimport category from \"../mockData/category.json\";\nimport catalog from \"../mockData/catalog.json\";\nimport httpService from \"../services/http.service\";\n\nconst useMockData = () => {\n  const statusConst = {\n    idle: \"Not Satarted\",\n    pending: \"In Progress\",\n    success: \"Completed\",\n    error: \"Error\",\n  };\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(statusConst.idle);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(0);\n  const summaryCount = category.length + catalog.length;\n  const incrementCount = () => {\n    setCount((prevState) => prevState + 1);\n  };\n  const updateProgress = () => {\n    if (count !== 0 && status === statusConst.idle) {\n      setStatus(statusConst.pending);\n    }\n    const newProgress = Math.floor((count / summaryCount) * 100);\n    if (progress < newProgress) {\n      setProgress(() => newProgress);\n    }\n    if (newProgress === 100) {\n      setStatus(statusConst.success);\n    }\n  };\n\n  useEffect(() => {\n    updateProgress();\n  }, [count]);\n\n  async function initialize() {\n    try {\n      for (const categ of category) {\n        await httpService.put(\"category/\" + categ.id, category);\n        incrementCount();\n      }\n      for (const cat of catalog) {\n        await httpService.put(\"catalog/\" + cat.id, cat);\n        incrementCount();\n      }\n    } catch (error) {\n      setError(error);\n      setStatus(statusConst.error);\n    }\n  }\n\n  return { error, initialize, progress, status };\n};\n\nexport default useMockData;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAElD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,WAAW,GAAG;IAClBC,IAAI,EAAE,cAAc;IACpBC,OAAO,EAAE,aAAa;IACtBC,OAAO,EAAE,WAAW;IACpBC,KAAK,EAAE;EACT,CAAC;EACD,MAAM,CAACA,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAACM,WAAW,CAACC,IAAI,CAAC;EACtD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMkB,YAAY,GAAGjB,QAAQ,CAACkB,MAAM,GAAGjB,OAAO,CAACiB,MAAM;EACrD,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BH,QAAQ,CAAEI,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EACxC,CAAC;EACD,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIN,KAAK,KAAK,CAAC,IAAIJ,MAAM,KAAKN,WAAW,CAACC,IAAI,EAAE;MAC9CM,SAAS,CAACP,WAAW,CAACE,OAAO,CAAC;IAChC;IACA,MAAMe,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAET,KAAK,GAAGE,YAAY,GAAI,GAAG,CAAC;IAC5D,IAAIJ,QAAQ,GAAGS,WAAW,EAAE;MAC1BR,WAAW,CAAC,MAAMQ,WAAW,CAAC;IAChC;IACA,IAAIA,WAAW,KAAK,GAAG,EAAE;MACvBV,SAAS,CAACP,WAAW,CAACG,OAAO,CAAC;IAChC;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACduB,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EAEX,eAAeU,UAAUA,CAAA,EAAG;IAC1B,IAAI;MACF,KAAK,MAAMC,KAAK,IAAI1B,QAAQ,EAAE;QAC5B,MAAME,WAAW,CAACyB,GAAG,CAAC,WAAW,GAAGD,KAAK,CAACE,EAAE,EAAE5B,QAAQ,CAAC;QACvDmB,cAAc,CAAC,CAAC;MAClB;MACA,KAAK,MAAMU,GAAG,IAAI5B,OAAO,EAAE;QACzB,MAAMC,WAAW,CAACyB,GAAG,CAAC,UAAU,GAAGE,GAAG,CAACD,EAAE,EAAEC,GAAG,CAAC;QAC/CV,cAAc,CAAC,CAAC;MAClB;IACF,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAAC;MACfG,SAAS,CAACP,WAAW,CAACI,KAAK,CAAC;IAC9B;EACF;EAEA,OAAO;IAAEA,KAAK;IAAEgB,UAAU;IAAEZ,QAAQ;IAAEF;EAAO,CAAC;AAChD,CAAC;AAACP,EAAA,CAjDID,WAAW;AAmDjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}